import { Pool } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL is not set in the environment variables');
}

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

pool.on('connect', () => {
  console.log('Connected to the PostgreSQL database');
});

pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
  process.exit(-1);
});

export const db = {
  query: (text: string, params?: unknown[]) => pool.query(text, params),
  getClient: () => pool.connect(),
};

// Function to create tables (idempotent)
export async function createTables() {
  const client = await pool.connect();
  try {
    // First check if tables exist, and if they do, alter them if needed
    const tablesExist = await client.query(
      `SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'users'
      );`
    );

    if (tablesExist.rows[0].exists) {
      console.log('Tables already exist, checking schema...');
      
      // Check if users table has id column as identity
      const idColumnCheck = await client.query(`
        SELECT column_name, column_default, is_identity 
        FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'id';
      `);
      
      const usernameColumnCheck = await client.query(`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'users' AND column_name = 'username';
      `);
      
      // If id column is an identity column, or we need to rename username to name, recreate the tables
      if ((idColumnCheck.rows.length > 0 && idColumnCheck.rows[0].is_identity === 'YES') || 
          usernameColumnCheck.rows.length > 0) {
        console.log('Need to recreate users table with UUID as primary key and/or rename username column to name...');
        
        // First drop the chats table that depends on users
        await client.query('DROP TABLE IF EXISTS chats CASCADE;');
        
        // Then drop the users table
        await client.query('DROP TABLE IF EXISTS users CASCADE;');
        
        console.log('Dropped existing tables, will recreate them...');
      }
    }

    // Users Table - now explicitly using UUID type for id
    await client.query(
      `CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );`
    );
    console.log('Users table checked/created successfully.');

    // Chats Table
    // Note: chat_id is expected to be a string generated by the client (e.g., Date.now() + random)
    await client.query(
      `CREATE TABLE IF NOT EXISTS chats (
        chat_id VARCHAR(255) PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        messages JSONB NOT NULL,
        user_id UUID,
        last_model_used VARCHAR(255),
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
      );`
    );
    // Add an index on user_id for chats table for better performance if you query chats by user
    await client.query(`CREATE INDEX IF NOT EXISTS idx_chats_user_id ON chats(user_id);`);
    console.log('Chats table checked/created successfully.');

  } catch (err) {
    console.error('Error creating tables:', err);
    throw err;
  } finally {
    client.release();
  }
}

createTables().catch(console.error); 